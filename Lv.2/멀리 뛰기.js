// 효진이는 멀리 뛰기를 연습하고 있습니다.
// 효진이는 한번에 1칸, 또는 2칸을 뛸 수 있습니다.
// 칸이 총 4개 있을 때, 효진이는
// (1칸, 1칸, 1칸, 1칸)
// (1칸, 2칸, 1칸)
// (1칸, 1칸, 2칸)
// (2칸, 1칸, 1칸)
// (2칸, 2칸)
// 의 5가지 방법으로 맨 끝 칸에 도달할 수 있습니다.
// 멀리뛰기에 사용될 칸의 수 n이 주어질 때, 효진이가 끝에 도달하는 방법이 몇 가지인지 알아내, 여기에 1234567를 나눈 나머지를 리턴하는 함수, solution을 완성하세요.

// 동적계획법을 이용한 피보나치
function solution(n) {
  // n길이 배열 생성
  const dp = Array(n).fill(0);
  // 0번과 1번 인덱스에 1 대입 => n이 0일 경우와 1일 경우에는 한 가지의 경우뿐이라서
  (dp[0] = 1), (dp[1] = 1);

  // i = 2부터 n까지
  for (let i = 2; i <= n; i++) {
    // i번째 배열의 요소를 피보나치 풀이로 변경
    dp[i] = (dp[i - 2] + dp[i - 1]) % 1234567;
  }
  // n번째 요소 반환
  return dp[n];
}

// 짝지어 제거하기는, 알파벳 소문자로 이루어진 문자열을 가지고 시작합니다.
// 먼저 문자열에서 같은 알파벳이 2개 붙어 있는 짝을 찾습니다.
// 그다음, 그 둘을 제거한 뒤, 앞뒤로 문자열을 이어 붙입니다.
// 이 과정을 반복해서 문자열을 모두 제거한다면 짝지어 제거하기가 종료됩니다.
// 문자열 S가 주어졌을 때, 짝지어 제거하기를 성공적으로 수행할 수 있는지 반환하는 함수를 완성해 주세요.
// 성공적으로 수행할 수 있으면 1을, 아닐 경우 0을 리턴해주면 됩니다.
// baabaa => [ b aa baa → bb aa → aa → ]

function solution(s) {
  // 스택으로 접근
  const stack = [];
  for (let i = 0; i < s.length; i++) {
    // 스택이 비어있거나 스택의 마지막 요소가 s[i]와 같지 않다면
    !stack.length || stack[stack.length - 1] !== s[i]
      ? // stack 배열에 s[i] 추가
        stack.push(s[i])
      : // 같다면 스택 배열의 마지막 요소 제거
        stack.pop();
  }
  // 스택 배열의 길이가 0이면 문자열이 모두 제거된 상태이므로 0을 반환하고 아닐 경우에는 1을 반환
  return stack.length ? 0 : 1;
}

// stack = []
// b => 스택이 빈 배열이므로 추가 => stack = [b]
// a => 스택이 빈 배열은 아니지만 스택에 들어있는 값인 b와 같지 않으므로 추가 => stack = [b, a]
// a => 스택의 마지막 요소인 a와 같으므로 pop => stack = [b]
// b => 스택의 마지막 요소인 b와 같으므로 pop => stack = []
// a => 스택이 빈 배열이므로 추가 => stack = [a]
// a => 스택의 마지막 요소인 a와 같으므로 pop => stack = []

// 두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요.
// 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다.

// 1. 최대공약수
function solution(n, m) {
  let arr = [];
  // 1부터 둘 중 작은값까지 순회
  for (let i = 1; i <= Math.min(n, m); i++) {
    // n을 i로 나눈 나머지 (n의 약수)와 m을 i로 나눈 나머지가 같다면
    if (n % i === m % i) {
      // 빈 배열에 값 추가
      // ex) n = 3, m = 12 => [1, 3]
      arr.push(i);
    }
  }
  // 배열에서 최댓값이 두 정수의 최대공약수
  return [Math.max(...arr)];
}
// 최대공약수: 두 수를 완벽히 나누어 떨어지게(나머지가 0이게) 할 수 있는 제일 큰 수
// 유클리드 호제법: 주어진 값 중 큰 값을 a, 작은 값을 b, a를 b로 나눈 나머지를 r이라고 가정한다면
// a > b, a % b .. r
// b % r .. r2
// r % r2 .. r3
// 이 과정을 반복해서 나머지를 0으로 만들어 주는 수가 최대 공약수가 된다.

// 최소공배수: 두 자연수를 곱하고 최대 공약수로 나눔

function solution(n, m) {
  // a를 b로 나눈 나머지가 0일 경우 b를 반환하고 아니면 재귀함수 호출
  const gcd = (a, b) => (a % b === 0 ? b : gcd(b, a % b));
  const lcm = (a, b) => (a * b) / gcd(a, b);
  return [gcd(n, m), lcm(n, m)];
}
